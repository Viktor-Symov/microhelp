=========================================
=== Справка по фильтрам Wireshark
=========================================

1. Операторы фильтров Wireshark:
  ==  /  eq				Равно
  !=  /  ne				Не равно
  <   /  lt				Меньше чем
  <=  /  le				Меньше или равно
  >   /  gt				Больше чем
  >=  /  ge				Больше или равно

  Примеры использования:
    tcp.port>=8000		Все TCP порты выше 8000


2. Логические операторы:
  and / &&			Логическое И, данные выводятся если они соответствуют обоим частям фильтра
  or  / ||			Логическое ИЛИ, достаточно чтобы только одно условие было истинным; если оба являются истинной, то это тоже подходит
  not / !			Логическое НЕ используется, когда мы хотим исключить некоторые пакеты

  Примеры использования:
   http or dns			Показать HTTP или DNS трафик
   !(arp or icmp or dns)	Показать любой трафик, кроме ARP, ICMP и DNS


3 Фильтр интерфейсов:
  frame.interface_name == "wlan0"	Показать пакеты только отправленные или полученные на интерфейсе wlan0


4.1 Трафик протоколов канального уровня:
4.1 ARP фильтры:
  arp					Для показа ARP трафика
  arp.src.hw_mac == 00:c0:ca:96:cf:cb	Показать фреймы ARP протокола, отправленные с устройства, имеющего MAC-адрес 00:c0:ca:96:cf:cb
  arp.src.proto_ipv4 == 192.168.50.90	Показать фреймы ARP протокола, отправленные с устройства, имеющего IP адрес 192.168.50.90
  arp.dst.hw_mac == 00:00:00:00:00:00	Показать фреймы ARP протокола, отправленные на устройство, имеющего MAC-адрес 00:00:00:00:00:00,
					00:00:00:00:00:00 используется когда протокол пытается узнать целевой MAC-адрес,
					ff:ff:ff:ff:ff:ff, этот адрес является широковещательным, предназначен для всех устройств локальной сети
  arp.dst.proto_ipv4 == 192.168.50.1	Показать фреймы ARP протокола, отправленные на устройство, имеющего IP адрес 192.168.50.1

  eth					Показать Ethernet трафик:
  eth.src == 00:c0:ca:96:cf:cb		Показать все фреймы отправленные с устройства имеющего MAC-адрес 00:c0:ca:96:cf:cb
  eth.dst == 78:cd:8e:a6:73:be		Показать фреймы, отправленные на устройство имеющего MAC-адрес 78:cd:8e:a6:73:be


5. Трафик протоколов межсетевого уровня:
5.1 Фильтрация IPv4 протокола:		
  ip						Показать весь IP трафик
  ip.addr == x.x.x.x				Показать трафик, связанный с определённым IP адресом (x.x.x.x), в которых этот IP адрес является источником данных либо получателем
  ip.addr == x.x.x.x && ip.addr == y.y.y.y	Показать трафик, связанный с данными двумя IP адресами
  ip.src == 138.201.81.199			Показать трафик, где источник IP адрес 138.201.81.199
  ip.dst == 138.201.81.199			Показать трафик, где получатель IP адрес 138.201.81.199
  ip.addr == 192.168.1.0/24			Показать трафик, связанная с определённой сетью 192.168.1.0/24
  ip.src == 192.168.1.0/24			Показать трафик, где источник сеть 192.168.1.0/24
  ip.dst == 192.168.1.0/24			Показать трафик, где получатель сеть 192.168.1.0/24


5.2 Фильтрация IPv6 протокола:
  ipv6						Показать весь IPv6 трафик
  ipv6.addr == 2604:a880:800:c1::2ae:d001	Фильтрация по IPv6 адресу
  ipv6.addr == 2604:a880:800:c1::2ae:d000/64	Фильтрация по IPv6 сети
  ipv6.src == 2604:a880:800:c1::2ae:d001	Фильтрация по IPv6 адресу источника
  ipv6.dst == 2604:a880:800:c1::2ae:d001	Фильтрация по IPv6 адресу получателя
  ipv6.src == 2604:a880:800:c1::2ae:d000/64	Фильтрация по IPv6 сети источника
  ipv6.dst == 2604:a880:800:c1::2ae:d000/64	Фильтрация по IPv6 сети получателя


5.3 Фильтрация ICMP для IPv6 протокола:
  icmpv6					Фильтрация для ICMPv6
  icmpv6.type == 133 or icmpv6.type == 134 or icmpv6.type == 135 or icmpv6.type == 136 or icmpv6.type == 137
						Фильтрация для пакетов ARP для IPv6


6. Трафик протоколов транспортного уровня:
6.1 Фильтрация TCP протокола:
  tcp					Показать только TCP трафик
  tcp.port==8080			Показать трафик, источником или портом назначения которого является определённый порт, например 8080
  tcp.srcport == 80			Показать трафик, источником которого является порт 80
  tcp.dstport == 80			Показать трафик, который отправляется службе, прослушивающей порт 80
  tcp.flags.syn==1			Показать TCP пакеты с включённым флагом SYN
  tcp.flags.ack==1			Показать TCP пакеты с включённым флагом ACK
  tcp.flags.reset==1			Показать TCP пакеты с включённым флагом RST
  tcp.flags.fin==1			Показать TCP пакеты с включённым флагом FIN
  tcp.flags.cwr==1			Показать TCP пакеты с включённым флагом CWR
  tcp.flags.ecn==1			Показать TCP пакеты с включённым флагом ECE
  tcp.flags.urg==1			Показать TCP пакеты с включённым флагом URG
  tcp.flags.push==1			Показать TCP пакеты с включённым флагом PSH
  tcp.flags.ns==1			Показать TCP пакеты с включённым флагом NS
  tcp.flags.syn==1 && tcp.flags.ack==0
					Показать TCP пакеты с включённым флагом SYN и отключённым флагом ACK:

  tcp.flags == 0x001			FIN. В формате tcp.flags == 0x0XX
  tcp.flags == 0x002			SYN. В формате tcp.flags == 0x0XX 
  tcp.flags == 0x004			RST. В формате tcp.flags == 0x0XX
  tcp.flags == 0x010			ACK. В формате tcp.flags == 0x0XX
  tcp.flags == 0x011			Установленные одновременно ACK и FIN
  tcp.flags == 0x012			Установленные одновременно ACK и SYN
  tcp.flags == 0x014			Установленные одновременно ACK и RST

  tcp.hdr_len == 32			Длина заголовка (смещение данных):
  tcp.hdr_len == 52			Длина заголовка (смещение данных):
  tcp.hdr_len > 32			Длина заголовка (смещение данных):

  tcp.flags.res == 1	Пакеты с установленными зарезервированными битами:

  tcp.window_size_value == 11		Фильтр с указанием размера окна
  tcp.window_size_value == 4468		Фильтр с указанием размера окна
  tcp.window_size_value > 65000		Фильтр с указанием размера окна
  tcp.window_size_value < 100		Фильтр с указанием размера окна
  tcp.window_size == 45056		Фильтр по вычесленному размеру окна
  tcp.window_size == 11			Фильтр по вычесленному размеру окна
  tcp.window_size_scalefactor == 4096	Фильтр по масштабированию размера окна
tcp.window_size_value — это необработанное значение размера окна, считываемое непосредственно из заголовка TCP, тогда как tcp.window_size — это вычисленный размер окна, который основан на том, применимо ли масштабирование окна или нет. Если масштабирование окна не используется или коэффициент масштабирования равен 1 или неизвестно, применимо ли масштабирование окна или нет, потому что трёхэтапное рукопожатие TCP не было захвачено, тогда эти два значения будут одинаковыми. С помощью tcp.window_size_scalefactor вы можете определить, какое из этих условий применимо — если его значение равно -1, то оно неизвестно, если его значение равно -2, тогда масштабирование окна не используется, а все остальные значения представляют фактический размер фактора масштабирования окна.

  tcp contains Hello			Показать TCP пакеты содержащие строку, например, строку Hello
  tcp.stream eq X			Следовать потоку TCP с номером X
  tcp.seq == x				Фильтровать по номеру потока
  tcp.analysis.retransmission		Показать повторные отправки пакетов. Для отслеживания замедления производительности приложений и потери пакетов
  tcp.analysis.flags			Показать проблемные пакеты (потерянные сегменты, повторную отправку и другие. В фильтр попадают пакеты TCP Keep-Alive, но они не являются показателем проблем.


  Фильтры для оценки качества сетевого подключения:
  tcp.analysis.duplicate_ack_num == 1	Фильтр для фреймов с флагом ACK, которые являются дублями. Большое количество таких фреймов может говорить о проблемах связи
  tcp.analysis.ack_lost_segment		Фильтр для фреймов, для которых не захвачены предыдущие сегменты
					Это нормально в начале захвата данных — поскольку информация перехватывается не с самого начала сессии
  tcp.analysis.retransmission		Фильтр для фреймов, которые являются ретрансмиссией (отправляются повторно)
  tcp.analysis.out_of_order		Фильтр для фреймов, которые получены не в правильном порядке


6.2 Фильтрация UDP протокола:
  udp					Показать только UDP трафик
  udp.srcport == 53			Показать трафик, где источником является порт 53
  udp.dstport == 53			Показать трафик, где плучателем является порт 53
  udp contains Hello			Показать UDP пакеты содержащие строку, например, строку Hello
  udp.port == 53			Указать исходный порт либо порт назначения
  udp.port > 40000			Указать исходный порт либо порт назначения
  udp.port < 30				Указать исходный порт либо порт назначения
  udp.length == 60			Указать исходный порт либо порт назначения
  udp.length > 50000			Указать длину пакета
  udp.time_delta > 1.5			Указать время между пакетами (для выявления проблем сети)
  udp.stream == 5			Указать номер потока (запрос-ответ)
  udp.possible_traceroute		Указать пакеты трассировки:


6.3 Фильтрация ICMP протокола:
  icmp					Показать только трафик ICMP
  icmpv6				Показать только трафик ICMPv6
  icmp.type==0				Показать все ответы на пинг
  icmp.type==8				Показать все пинг запросы
  icmp.type==3				Показать все ошибки недоступности/запрета хостов и портов
  icmp.type==8				Показать все попытки перенаправить маршрутизацию с использованием ICMP
  icmp.type==3 && icmp.code==3		Пример использования значения CODE, следующий фильтр покажет сообщения о недоступности порта
  Другие типы ICMP, а также варианты CODE здесь: https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPOPTIONS


7. Трафик протоколов прикладного уровня:
7.1 Фильтрация HTTP протокола:
  http					Показать трафик протокола HTTP
  http2					Показать трафик протокола HTTP/2
  http.request.method == "POST"		Показать данные переданные методом POST
  http.request.method == "GET"		Показать данные переданные методом GET
  http.host == "<URL>"			Показать запросы к определённому сайту
  http.host contains "частичное имя"	Показать запросы к определённому сайту по части имени:
  http.cookie				Фильтр для вывода HTTP запросов, в которых передавались куки
  http.set_cookie			Запросы, в которых сервер установил кукиз в браузер пользователя
  http.content_type contains "image"	Поиск любых переданных изображений
  http.content_type contains "gif"	Поиск определённых видов изображений
  http.content_type contains "jpeg"	Поиск определённых видов изображений
  http.content_type contains "png"	Поиск определённых видов изображений
  http.content_type contains "text"	Поиск файлов определённого типа
  http.content_type contains "xml"	Поиск файлов определённого типа
  http.content_type contains "html"	Поиск файлов определённого типа
  http.content_type contains "json"	Поиск файлов определённого типа
  http.content_type contains "javascript"
					Поиск файлов определённого типа
  http.content_type contains "x-www-form-urlencode"
					Поиск файлов определённого типа
  http.content_type contains "compressed"
					Поиск файлов определённого типа
  http.content_type contains "application"
					Поиск файлов определённого типа

  http.request.uri contains "zip"	Поиск файлов определённого типа
  http.request.uri.path contains "jpg"	Вместо http.request.uri для большей точности можно использовать фильтры http.request.uri.path или http.request.uri.query, например, для поиска запросов на скачивание файлов JPG (ссылки на картинки)
  http.referer contains "ru-board.com"	Также вы можете отфильтровать запросы, содержащие определённое значение HTTP заголовка REFERER (реферер). Например, для поиска запросов, в которых реферером является ru-board.com
  http.authorization			Поиск запросов с любой авторизацией. Аналогично с помощью contains можно искать определённые виды авторизации
  http.file_data			Поиск файлов в HTTP потоке
  http.time>1				Показать какие HTTP данные получены с задержкой. Покажет трафик, полученный позднее чем через 1 секунду.
  http.response.code==404		Показать статусы HTTP кодов ответа. Например, при котором получена ошибка 404 Not Found
  http.request && !(http.request.uri contains ".ico" or http.request.uri contains ".css" or http.request.uri contains ".js" or http.request.uri contains ".gif" or http.request.uri contains ".jpg")
					Очень интересный фильтр. Во-первых, он показывает какие сложные конструкции можно строить из отдельных фильтров. Во-вторых, он позволяет исследовать HTTP запросы и в целом веб активность, исключая лишние данные. С помощью этого фильтра вы можете просматривать веб-активность высокого уровня. Правила внутри скобок исключают изображения, файлы Javascript и таблицы стилей — всё, что страница запрашивает внутри себя. Если исследуемые страницы содержат другие встроенные объекты, то исключите их похожим образом

  http.host				Фильтрация полей HTTP заголовков
  http.host == "www.archlinux.org"	Показать соединения, имеющие точное значение поля Host в HTTP заголовке
  http.host contains "archlinux.org"	Указать значение поля содержащееся Host в HTTP заголовке
  http.content_type == "text/plain"	Фильтр по полю Content-Type в HTTP заголовке:
  http.server == "nginx"			Фильтр по полю Server в HTTP заголовке:
  http.cookie				Фильтры по полю Cookie в HTTP заголовке
  http.cookie_pair			Фильтры по полю Cookie в HTTP заголовке
  http.user_agent == "Mozilla/5.0 (X11; Linux x86_64; rv:82.0) Gecko/20100101 Firefox/82.0"
					Фильтр по полю User Agent в HTTP заголовке
  http.x_forwarded_for			Фильтр по полю X-Powered-By в HTTP заголовке
  http.location				Для поиска переадресаций (поле Location):
  http.referer contains "hello.ru"	Для поиска сайтов, с которых сделан переход на страницу (поле Referer)
  http.request				Фильтра запросов
  http.request.uri			Фильтра запросов
  http.request.uri.path			Фильтра запросов
  http.request.uri.query.			Фильтра запросов
  http.request.uri.query.parameter	Фильтра запросов
  http.request.method			Фильтра запросов
  http.response				Фильтры ответов
  http.response.code == 404		Поиск по коду ответа
  http.response.code != 200		Поиск по коду ответа
  http.authorization			Все сессии аутентификации (BASIC/DIGEST/NTLM)
  http.authbasic			Только HTTP Basic аутентификация
  http.authbasic == "ЛОГИН:ПАРОЛЬ"	Только HTTP Basic аутентификация с определёнными учётными данными
  http.proxy_authenticate		Этот фильтр покажет запросы от прокси на HTTP Digest аутентификацию
  http.proxy_authorization		Этот фильтр покажет учётные данные, отправляемые клиентом на прокси-сервер для авторизации
  http.request.method == "CONNECT"	Показ запросов, сделанных через прокси-сервер (HTTP метод CONNECT)
  http.authorization			Поскольку для аутентификации пользователей веб-прокси используют HTTP Basic и Digest аутентификации, то можно использовать соответствующие фильтры Wireshark. Все сессии аутентификации (BASIC/DIGEST/NTLM)
  http.proxy_authenticate contains "Digest"
					Запрос Digest аутентификации от прокси-сервера
  http.proxy_authorization contains "Digest"
					Ответ пользователя передаваемый на прокси-сервер с информацией для Digest авторизации


7.2 Фильтрация TLS протокола:
  tls					Чтобы показать только трафик на основе TLS (зашифрованные данные)
  tls.handshake				Рукопожатие протокола
  tls.handshake.certificates		Сертификаты
  tls.handshake.certificate contains "*.hello.ru"
					Поиск по содержимому сертификатов


7.3 Фильтрация DNS протокола:
  dns					Показать все DNS запросы и ответы
  dns.time>1				Показать, какие DNS запросы заняли много времени
  dns.flags.rcode != 0			Этот фильтр показывает, какие dns запросы не могут быть правильно разрешены
  dns.flags.response == 0		Показать только DNS запросы
  dns.flags.response == 1		Показать только DNS ответы
  dns.qry.name == "google.com"		Показать запросы и ответы на них, в котором ищется IP для google.com
  dns.qry.type == 1			Показать DNS запросы и ответы касаемые записи A
  dns.qry.type == 28			Показать DNS запросы и ответы касаемые записи AAAA
  dns.a == 216.58.196.3			Показать ответы, в которых для записи A в качестве IP отправлен 216.58.196.3
  dns.aaaa == 2a01:4f8:172:1d86::1	Показать ответы, в которых для записи AAAA в качестве IP отправлен 2a01:4f8:172:1d86::1
  dns.cname == "apollo.archlinux.org"	Показать записи с CNAME apollo.archlinux.org
  dns.resp.len > 30			Показать ответы длиной более 30
  dns.qry.name.len >25			Показать запросы с длиной более 25
  dns.flags.recavail == 1		Показать ответы DNS серверов на которых доступна рекурсия
  dns.flags.recavail == 0		Показать ответы DNS серверов на которых не доступна рекурсия
  dns.flags.recdesired == 1		Желательна ли рекурсия (если запрошенный DNS сервер не имеет информацию об имени хоста, должен ли он опрашивать другие DNS сервера в поисках этой информации)
					Если в запросе стоит 1, значит рекурсия нужна, если 0 — значит она не желательна
  dns.flags.checkdisable == 0		Принимать ли неаутентифицированные данные (0 означает не принимать, 1 означает принимать)


7.4 Фильтрация DHCP протокола:
  udp.dstport==67			Чтобы увидеть, как назначаются IP адреса по протоколу DHCP
  bootp.option.dhcp			Или так
  bootp.option.dhcp == 3		Чтобы показать DHCP запросы
  bootp.option.dhcp == 1		Чтобы показать DHCP Discover


7.5 Фильтрация SMB протокола:
  smb2.cmd==3 or smb2.cmd==5		SMB фильтр. В колонке Info показывает всё дерево (шару) соединений, открытых директорий и открытых файлов в трассировке


7.6 Фильтрация NetBIOS протокола:
  nbns					Фильтр Wireshark для службы имён (NetBIOS-NS)
  nbdgm					Фильтр Wireshark для службы рассылки дейтаграмм (NetBIOS-DGM)
  nbss					Фильтр Wireshark для службы сеанса (NetBIOS-SSN)


7.7 Фильтрация VNC протокола:
  vnc					Чтобы показать только трафик VNC сессий
  vnc.auth_challenge			VNC challenge (вызов)
  vnc.auth_response			VNC response (ответ)
  vnc.auth_result			Результат попытки аутентификации на VNC сервере
  vnc.auth_challenge or vnc.auth_response or vnc.auth_result	
					Вызов, ответ и результат попытки аутентификации на VNC сервере
  vnc.auth_challenge or vnc.auth_response or vnc.auth_result
  vnc.desktop_name			Имя компьютера с VNC сервером
  vnc.button_1_pos			Позиция кнопок мыши
  vnc.button_2_pos			Позиция кнопок мыши
  …………...
  vnc.button_8_pos			Позиция кнопок мыши
  vnc.client_security_type		Выбранный тип безопасности
  vnc.client_set_encodings_encoding_type
					Тип кодирования
  vnc.client_proto_ver			Версия VNC протокола клиента
  vnc.server_proto_ver			Версия VNC протокола сервера
  vnc.width				Ширина Framebuffer
  vnc.key				Клавиша
  vnc.key_down				Нажатие клавиши
  vnc.h264_data				Данные передаваемого видео в формате H.264
  vnc.client_cut_text			Вырезанный текст


7.8 Фильтрация Remote Desktop Protocol (RDP) протокола:
  rdp					Чтобы показать только трафик RDP сессий


8. Фильтры для Wi-Fi фреймов:
  eapol					Показать элементы четырёхэтапных рукопожатий (то есть фреймы протокола EAPOL)
  wlan.fc.type_subtype == 0x08		Показать фреймы Beacon (маяки)
  wlan.fc.type_subtype == 0x05		Показать фреймы Probe Response
  wlan.fc.type_subtype == 0x08 || wlan.fc.type_subtype == 0x05 || eapol
					Показать всё сразу: EAPOL, маяки, Probe Response
  wlan.addr==BSSID			Показать беспроводные фреймы для определённого устройства с MAC-адресом BSSID
  (wlan.fc.type_subtype == 0x08 || wlan.fc.type_subtype == 0x05 || eapol) && wlan.addr==28:28:5D:6C:16:24
					Показать EAPOL, маяки, Probe Response для определённого устройства с MAC-адресом 28:28:5D:6C:16:24
  eapol && wlan.rsn.ie.pmkid		Показ всех PMKID
  wlan.rsn.ie.pmkid			Либо просто
  wlan.rsn.ie.pmkid == 21:89:fa:52:75:df:e9:f5:56:f3:2e:e5:4b:86:b7:8f
					Показать PMKID с определённым значением
  (wlan.fc.type_subtype == 0x08 || wlan.fc.type_subtype == 0x05 || (eapol && wlan.rsn.ie.pmkid))
					Показать PMKID, маяки, Probe Response
  (wlan.fc.type_subtype == 0x08 || wlan.fc.type_subtype == 0x05 || (eapol && wlan.rsn.ie.pmkid)) && wlan.addr==40:3D:EC:C2:72:B8
					Показать PMKID, маяки, Probe Response для точки доступа с MAC-адресом 40:3D:EC:C2:72:B8
  wlan_rsna_eapol.keydes.msgnr == 1	Показать только первое сообщение рукопожатия
  wlan_rsna_eapol.keydes.msgnr == 2	Показать только второе сообщение рукопожатия (можно использовать для сообщения рукопожатия с любым номером):
  wlan_radio.data_rate == 1		Показать фреймы для точек доступа со скоростью (Data Rate) 1 Мb/s
  wlan_radio.data_rate > 10		Показать фреймы для точек доступа со скоростью более 10 Мb/s
  radiotap.channel.flags.2ghz == 1	Показать данные относящиеся к частотам диапазона 2 GHz
  radiotap.channel.flags.5ghz == 1	Показать данные относящиеся к частотам диапазона 5 GHz
  wlan_radio.channel == 44		Показать захваченные данные на определённом канале
  radiotap.channel.freq == 2412		Показывать точки доступа на определённой частоте
  wlan_radio.signal_dbm > -50		Показывать точки доступа с определённым уровнем сигнала
  radiotap.present.antenna == 1		Фильтры, связанные с наличием у устройства антены
  radiotap.antenna == 1			Фильтры, связанные с наличием у устройства антены


9. Фильтры Wireshark для идентификации типа программного обеспечения:
9.1 TLS fingerprinting клиентов
  tls.handshake.ja3		Чтобы вывести все Handshake Protocol: Client Hello для которых вычислен JA3 используйте фильтр
  tls.handshake.ja3 == "d733943e54248bfc530d4fd240bc95ea"	Чтобы найти конкретное значение JA3, укажите его следующим образом
  tls.handshake.ja3_full		Вы также можете получить полную строку JA3_FULL, используемую для вычисления JA3. Чтобы вывести все строки JA3_FULL, используйте следующий фильтр без указания значений
  tls.handshake.ja3_full == "771,4866-4867-4865-4868-49196-52393-49325-49162-49195-49324-49161-49200-52392-49172-49199-49171-157-49309-53-156-49308-47-159-52394-49311-57-158-49310-51,0-23-51-65281-5-43-11-10-22-16-28-13,23-24-25-29-30-256-257-258-259-260,0"
					Либо укажите конкретное значение JA3_FULL
  tls.handshake.ja4			Чтобы вывести все Handshake Protocol: Client Hello для которых вычислен JA4 используйте фильтр
  tls.handshake.ja4 == "t13d2912h2_723694b0fccc_288f874c93d6"
					Чтобы найти конкретное значение JA4, укажите его следующим образом
  tls.handshake.ja4_r			Вы также можете получить полную строку JA4_R, используемую для вычисления JA4. Чтобы вывести все строки JA4_R, используйте следующий фильтр без указания значений
  tls.handshake.ja4_r == "t13d2912h2_002f,0033,0035,0039,009c,009d,009e,009f,1301,1302,1303,1304,c009,c00a,c013,c014,c02b,c02c,c02f,c030,c09c,c09d,c09e,c09f,c0ac,c0ad,cca8,cca9,ccaa_0005,000a,000b,000d,0016,0017,001c,002b,0033,ff01_0401,0809,0804,0403,0807,0501,080a,0805,0503,0808,0601,080b,0806,0603,0201,0203"
TLS fingerprinting серверов (хеш JA3S)
					Либо укажите конкретное значение JA4_R
  tls.handshake.ja3s			Чтобы вывести все Handshake Protocol: Server Hello для которых вычислен JA3S используйте фильтр
  tls.handshake.ja3s == "15af977ce25de452b96affa2addb1036"
					Чтобы найти конкретное значение JA3S, укажите его следующим образом
  tls.handshake.ja3s_full		Вы также можете получить полную строку JA3S_FULL, используемую для вычисления JA3S. Чтобы вывести все строки JA3S_FULL, используйте следующий фильтр без указания значений
  tls.handshake.ja3s_full == "771,4866,43-51"
					Либо укажите конкретное значение JA3S_FULL
  tls.handshake.ciphersuite		Примечание: в категории «tls.handshake.*» имеется множество других фильтров, которые могут представлять интерес при получении отпечатков TLS клиентов и серверов, например


9.2 TLS fingerprinting серверов (хеш JA4S):
На данный момент в Wireshark отсутствует поддержка JA4S. Но вычисление данного хеша в Wireshark можно активировать добавив плагин JA4+ Wireshark (https://github.com/FoxIO-LLC/ja4/tree/main/wireshark/binaries/linux). Этот плагин используется для получения JA4S и JA4S_R, а также некоторых других хешей. В общей сложности данный плагин добавляет следующие хеши
  ja4.ja4s				JA4S
  ja4.ja4h				JA4H
  ja4.ja4l				JA4L
  ja4.ja4ls				JA4LS
  ja4.ja4x				JA4X
  ja4.ja4ssh				JA4SSH
  ja4.ja4t				JA4T
  ja4.ja4ts				JA4TS


9.3 TLS fingerprinting протокола QUIC (клиентов и серверов):
  tls.handshake.ja3 && quic		TLS fingerprinting клиентов (хеши JA3 и JA4 для протокола QUIC)
  tls.handshake.ja4 && quic		TLS fingerprinting клиентов (хеши JA3 и JA4 для протокола QUIC)
  tls.handshake.ja3 && ! quic		Хеши JA3 и JA4 протокола TLS без QUIC
  tls.handshake.ja4 && ! quic		Хеши JA3 и JA4 протокола TLS без QUIC
  tls.handshake.ja3s && quic		TLS fingerprinting серверов (хеши JA3S и JA4S для протокола QUIC)
  ja4.ja4s && quic			TLS fingerprinting серверов (хеши JA3S и JA4S для протокола QUIC)
  tls.handshake.ja3s && ! quic		Хеши JA3S и JA4S протокола TLS без QUIC
  ja4.ja4s && ! quic			Хеши JA3S и JA4S протокола TLS без QUIC


9.4 SSH fingerprinting:
  ssh.kex.hasshserver			Чтобы показать все HASSH для клиентов и серверов SSH используйте следующий фильтр:
  ssh.kex.hasshserver == "0babd4b68a5f3757987be75fe35ad60a"	Вы также можете выполнить поиск по конкретному значению HASSH следующим образом:
  ssh.kex.hasshserver_algorithms	В категории «ssh.kex.*» имеется множество других фильтров, которые могут представлять интерес при получении отпечатков SSH клиентов и серверов

