=========================================
=== Справка по GIT.
=== Система контроля версий.
=========================================

1. Области git:
 - Working directory: рабочий каталог, где находятся все файлы и каталоги;
 - Staging area (index): подготовленные к коммиту файлы;
 - Repository: пространство содержащее все ветки и коммиты;

2. Статусы отслеживания файлов:
 - Untracked: не отслеживаемый, только что созданный файл;
 - Staged: файл, добавленный в индекс, готовый к коммиту;
 - Unmodified: сохраненный и не модифицированный файл;
 - Modified: модифицированный файл;

3. Типы объектов в git:
 - Blob: файл;
 - Tree: каталог;
 - Commit: Сохраненное состояние проекта;
 - Annotated Tag - аннотированный тег;

4. Показать версию git:
 # git --version

5. Перед любыми изменениями в git необходимо задать параметры:
 # git config --global user.name "Viktor Symov"
 # git config --global user.email "vsimov@yandex.ru"

6. Не обязательные настройки git
 # git config --global http.proxy http://proxy.mycompany:8080
 # git config --global http.proxy http://domain\\username:password@proxy:8080/

7. Показать все настройки git:
 # git config --list 

8. Создать проект:
 # mkdir myproject && cd myproject
 # git init
 Создается проект, ветка по умолчанию "master"

9. Показать название текущей ветки и других веток:
 # git branch

10. Переименовать ветку (часто используемая практика):
 # git branch -m <new-name> 

11. Создать новую ветку на основе текущей:
 # git branch <new-tree>

12. Создать новую ветку на основе текущей и перейти в неё:
 # git branch -b <new-tree>

13. Сменить ветку:
 # git checkout <new-tree>

14. Проверить состояние проекта:
 # git state

15. Добавить файл в область Staging area:
 # git add file.txt
   Добавить все файлы в область Staging area:
 # git add .

16. Добавить все изменения в коммит:
 # git commit -m "Describing message"

17. Показать историю  коммитов:
 # git log

18. Перейти на другой коммит:
 # git checkout ca30f6584070ab61da8f89f81ede13d64a7482b3

19. Объединить ветки (другая ветка вливается в текущую):
 # git merge <other-branch> -m <Message>

20. Клонировать проект с удаленного репозитория:
 # git clone <url>

21. Показать настройки удаленного сервера:
 # git remote -v

22. Проверить как локальная ветка связана с удаленной веткой репозитория:
 # git branch -vv

23. Обновить проект на удаленном репозитории с локального ПК:
 В первый раз:
 # git push -u origin <branch>
 Потом:
 # git push

24. Скачать изменения проекта, но не устанавливать их:
 # git fetch

25. Обновить проект на локальном ПК c удаленного репозитория:
 В первый раз:
 # git pull -u origin <branch>
 Потом:
 # git pull

26. Сохранить Token:
 # echo "https://username:token@github.com">> ~/.git-credentials
 # git config --global credential.helper store
 # git push
   Everything up-to-date

27. Связать локальный репозиторий с удаленным репозиторием:
 # git remote add <url>

28. Просмотр изменений в файлах
 # git diff

29. Запустить текущий проект в Visual Studio Code:
 # code .

30. Мои репозитории на Github.com
 https://github.com/Viktor-Symov/connect.git
 https://github.com/Viktor-Symov/microhelp.git

